name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t research-app:${{ github.sha }} .
          docker build -t research-app:latest .

      - name: Test Docker container
        shell: powershell
        run: |
          # Stop existing container if running
          docker stop research-app-test 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Host "No existing test container to stop" }
          docker rm research-app-test 2>$null  
          if ($LASTEXITCODE -ne 0) { Write-Host "No existing test container to remove" }
          
          # Run new container for testing
          Write-Host "üöÄ Starting test container..."
          docker run -d --name research-app-test -p 3001:3000 research-app:latest
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to start test container"
            exit 1
          }
          
          # Wait for container to start
          Write-Host "‚è≥ Waiting for container to start..."
          Start-Sleep -Seconds 15
          
          # Test if the application is responding
          Write-Host "üß™ Testing application response..."
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3001" -UseBasicParsing -TimeoutSec 30
            Write-Host "‚úÖ Container test successful - Status: $($response.StatusCode)"
          } catch {
            Write-Host "‚ùå Container test failed: $($_.Exception.Message)"
            Write-Host "üìã Container logs:"
            docker logs research-app-test
            docker stop research-app-test 2>$null
            docker rm research-app-test 2>$null
            exit 1
          }
          
          # Clean up test container
          Write-Host "üßπ Cleaning up test container..."
          docker stop research-app-test
          docker rm research-app-test
          Write-Host "‚úÖ Test completed successfully"

  deploy:
    runs-on: self-hosted
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and deploy Docker container
        shell: powershell
        run: |
          Write-Host "üèóÔ∏è Building production Docker image..."
          docker build -t research-app:production .
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to build production image"
            exit 1
          }
          
          Write-Host "üöÄ Deploying to local production..."
          
          # Stop existing production container if running
          docker stop research-app 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Host "No existing production container to stop" }
          docker rm research-app 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Host "No existing production container to remove" }
          
          # Run new production container
          docker run -d --name research-app -p 3000:3000 --restart unless-stopped research-app:production
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to start production container"
            exit 1
          }
          
          Write-Host "‚úÖ Deployment complete!"
          Write-Host "üåê Application available at http://localhost:3000"

      - name: Verify deployment
        shell: powershell
        run: |
          Write-Host "‚è≥ Waiting for deployment to stabilize..."
          Start-Sleep -Seconds 15
          
          Write-Host "üîç Verifying deployment..."
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 30
            Write-Host "‚úÖ Deployment verification successful - Status: $($response.StatusCode)"
          } catch {
            Write-Host "‚ùå Deployment verification failed: $($_.Exception.Message)"
            Write-Host "üìã Production container logs:"
            docker logs research-app
            exit 1
          }